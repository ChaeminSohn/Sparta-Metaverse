//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/08.Inputs/Player Input System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input System"",
    ""maps"": [
        {
            ""name"": ""MainPlatform"",
            ""id"": ""de03dcf7-f863-4900-bbc3-6c63e94cb63c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b32a2e70-64e5-4552-959b-a3786f2bf969"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""45710adf-5f04-4d01-998c-8b3f68e65e5d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b726d68-7e3f-4b31-ba45-25add9d32594"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""18e79d3d-3848-44ba-885d-b3dc24277bd5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eaf9c1a4-e436-4754-adb4-e2a24890788d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5bba420f-0a2d-48e8-8636-90370a0b214a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""039bc3a6-dd95-4283-aac0-0093de8808e7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c262dea5-e838-4c62-bdcc-c3670155d29a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""78255640-1412-4bba-82d1-0016f9e9b0cb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8af98f87-c301-40d9-be52-1c59fbe5a879"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a9ac519-13f8-4a0d-834a-17d304415883"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FlappyGame"",
            ""id"": ""adc01d5f-bb1c-4055-aa54-b5e62dade4da"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""f96670a4-7b8d-42fc-be4f-616a0af1d745"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""580ca3a8-16d5-43ad-939b-3f222e33d066"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""JumpUpGame"",
            ""id"": ""4b502595-51bc-4500-be70-9a2004d52f7e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a95bb0cc-4ce2-4f83-b905-aa9ea26bb0e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""5b1dc5f8-cdde-4a8d-b238-f48bd6a63efd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9fc46c71-d65b-4688-8d2f-1c7a341a4b03"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b91c6f3c-97d1-43c6-9bf2-83ef0f033daa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9fe9dcb8-7f3e-465b-b33f-048f3e54346f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1ef2536a-17a1-4fca-88c1-8504161958da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""93eef4ef-18f5-4db6-9e36-e88f2d262b3b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b6144222-ec43-47d3-90eb-11954be64dc6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85871725-1b82-4327-bbf4-644402fbe5d0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5d40bdd6-e047-4f8e-a5b5-3b246f24cdab"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""43fa8a08-5aaa-4c3f-8cee-6b52b92d8d82"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d989c3f0-4cee-4fb8-a80d-930aa9a7f521"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2bcbfec5-144e-4345-b0d8-3b07c3252e8f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InfiniteStairsGame"",
            ""id"": ""b5c08548-81ec-423c-ad54-eba73aeb955d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""78d28113-3712-4f7d-9842-c7abe57c03eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""5b3dcfd0-b6e0-4224-afc7-aad396dcc2ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9083ff5c-9c75-46e0-bdec-b5f5e2f41f21"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1e9239a-637c-4b4e-b00b-4a2440db01de"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c950f63-a528-450c-91d4-021b17517470"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e00d53db-a157-4f46-9e4a-65eb992d170c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""711ac31a-4380-428d-84d1-642639087722"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""00588368-3266-4bff-b36e-0edb417cc177"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""111278b2-5b03-4da5-ac2e-5042e2fcd891"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainPlatform
        m_MainPlatform = asset.FindActionMap("MainPlatform", throwIfNotFound: true);
        m_MainPlatform_Move = m_MainPlatform.FindAction("Move", throwIfNotFound: true);
        // FlappyGame
        m_FlappyGame = asset.FindActionMap("FlappyGame", throwIfNotFound: true);
        m_FlappyGame_Jump = m_FlappyGame.FindAction("Jump", throwIfNotFound: true);
        // JumpUpGame
        m_JumpUpGame = asset.FindActionMap("JumpUpGame", throwIfNotFound: true);
        m_JumpUpGame_Move = m_JumpUpGame.FindAction("Move", throwIfNotFound: true);
        m_JumpUpGame_Jump = m_JumpUpGame.FindAction("Jump", throwIfNotFound: true);
        // InfiniteStairsGame
        m_InfiniteStairsGame = asset.FindActionMap("InfiniteStairsGame", throwIfNotFound: true);
        m_InfiniteStairsGame_Move = m_InfiniteStairsGame.FindAction("Move", throwIfNotFound: true);
        m_InfiniteStairsGame_Turn = m_InfiniteStairsGame.FindAction("Turn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainPlatform
    private readonly InputActionMap m_MainPlatform;
    private List<IMainPlatformActions> m_MainPlatformActionsCallbackInterfaces = new List<IMainPlatformActions>();
    private readonly InputAction m_MainPlatform_Move;
    public struct MainPlatformActions
    {
        private @PlayerInputSystem m_Wrapper;
        public MainPlatformActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MainPlatform_Move;
        public InputActionMap Get() { return m_Wrapper.m_MainPlatform; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainPlatformActions set) { return set.Get(); }
        public void AddCallbacks(IMainPlatformActions instance)
        {
            if (instance == null || m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMainPlatformActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMainPlatformActions instance)
        {
            if (m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainPlatformActions instance)
        {
            foreach (var item in m_Wrapper.m_MainPlatformActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainPlatformActions @MainPlatform => new MainPlatformActions(this);

    // FlappyGame
    private readonly InputActionMap m_FlappyGame;
    private List<IFlappyGameActions> m_FlappyGameActionsCallbackInterfaces = new List<IFlappyGameActions>();
    private readonly InputAction m_FlappyGame_Jump;
    public struct FlappyGameActions
    {
        private @PlayerInputSystem m_Wrapper;
        public FlappyGameActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FlappyGame_Jump;
        public InputActionMap Get() { return m_Wrapper.m_FlappyGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyGameActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyGameActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IFlappyGameActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IFlappyGameActions instance)
        {
            if (m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyGameActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyGameActions @FlappyGame => new FlappyGameActions(this);

    // JumpUpGame
    private readonly InputActionMap m_JumpUpGame;
    private List<IJumpUpGameActions> m_JumpUpGameActionsCallbackInterfaces = new List<IJumpUpGameActions>();
    private readonly InputAction m_JumpUpGame_Move;
    private readonly InputAction m_JumpUpGame_Jump;
    public struct JumpUpGameActions
    {
        private @PlayerInputSystem m_Wrapper;
        public JumpUpGameActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_JumpUpGame_Move;
        public InputAction @Jump => m_Wrapper.m_JumpUpGame_Jump;
        public InputActionMap Get() { return m_Wrapper.m_JumpUpGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpUpGameActions set) { return set.Get(); }
        public void AddCallbacks(IJumpUpGameActions instance)
        {
            if (instance == null || m_Wrapper.m_JumpUpGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JumpUpGameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IJumpUpGameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IJumpUpGameActions instance)
        {
            if (m_Wrapper.m_JumpUpGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJumpUpGameActions instance)
        {
            foreach (var item in m_Wrapper.m_JumpUpGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JumpUpGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JumpUpGameActions @JumpUpGame => new JumpUpGameActions(this);

    // InfiniteStairsGame
    private readonly InputActionMap m_InfiniteStairsGame;
    private List<IInfiniteStairsGameActions> m_InfiniteStairsGameActionsCallbackInterfaces = new List<IInfiniteStairsGameActions>();
    private readonly InputAction m_InfiniteStairsGame_Move;
    private readonly InputAction m_InfiniteStairsGame_Turn;
    public struct InfiniteStairsGameActions
    {
        private @PlayerInputSystem m_Wrapper;
        public InfiniteStairsGameActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InfiniteStairsGame_Move;
        public InputAction @Turn => m_Wrapper.m_InfiniteStairsGame_Turn;
        public InputActionMap Get() { return m_Wrapper.m_InfiniteStairsGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InfiniteStairsGameActions set) { return set.Get(); }
        public void AddCallbacks(IInfiniteStairsGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InfiniteStairsGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InfiniteStairsGameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
        }

        private void UnregisterCallbacks(IInfiniteStairsGameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
        }

        public void RemoveCallbacks(IInfiniteStairsGameActions instance)
        {
            if (m_Wrapper.m_InfiniteStairsGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInfiniteStairsGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InfiniteStairsGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InfiniteStairsGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InfiniteStairsGameActions @InfiniteStairsGame => new InfiniteStairsGameActions(this);
    public interface IMainPlatformActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IFlappyGameActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IJumpUpGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IInfiniteStairsGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
    }
}
