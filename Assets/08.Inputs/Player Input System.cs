//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/08.Inputs/Player Input System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input System"",
    ""maps"": [
        {
            ""name"": ""MainPlatform"",
            ""id"": ""de03dcf7-f863-4900-bbc3-6c63e94cb63c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b32a2e70-64e5-4552-959b-a3786f2bf969"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""75513687-3155-4893-85a9-4e100802492f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""45710adf-5f04-4d01-998c-8b3f68e65e5d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b726d68-7e3f-4b31-ba45-25add9d32594"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""18e79d3d-3848-44ba-885d-b3dc24277bd5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eaf9c1a4-e436-4754-adb4-e2a24890788d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5bba420f-0a2d-48e8-8636-90370a0b214a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""039bc3a6-dd95-4283-aac0-0093de8808e7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c262dea5-e838-4c62-bdcc-c3670155d29a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""78255640-1412-4bba-82d1-0016f9e9b0cb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8af98f87-c301-40d9-be52-1c59fbe5a879"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a9ac519-13f8-4a0d-834a-17d304415883"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e254d875-d4a7-4d50-8528-d534e7b05cd1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FlappyGame"",
            ""id"": ""adc01d5f-bb1c-4055-aa54-b5e62dade4da"",
            ""actions"": [
                {
                    ""name"": ""Flap"",
                    ""type"": ""Value"",
                    ""id"": ""f96670a4-7b8d-42fc-be4f-616a0af1d745"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""580ca3a8-16d5-43ad-939b-3f222e33d066"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainPlatform
        m_MainPlatform = asset.FindActionMap("MainPlatform", throwIfNotFound: true);
        m_MainPlatform_Move = m_MainPlatform.FindAction("Move", throwIfNotFound: true);
        m_MainPlatform_Look = m_MainPlatform.FindAction("Look", throwIfNotFound: true);
        // FlappyGame
        m_FlappyGame = asset.FindActionMap("FlappyGame", throwIfNotFound: true);
        m_FlappyGame_Flap = m_FlappyGame.FindAction("Flap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainPlatform
    private readonly InputActionMap m_MainPlatform;
    private List<IMainPlatformActions> m_MainPlatformActionsCallbackInterfaces = new List<IMainPlatformActions>();
    private readonly InputAction m_MainPlatform_Move;
    private readonly InputAction m_MainPlatform_Look;
    public struct MainPlatformActions
    {
        private @PlayerInputSystem m_Wrapper;
        public MainPlatformActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MainPlatform_Move;
        public InputAction @Look => m_Wrapper.m_MainPlatform_Look;
        public InputActionMap Get() { return m_Wrapper.m_MainPlatform; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainPlatformActions set) { return set.Get(); }
        public void AddCallbacks(IMainPlatformActions instance)
        {
            if (instance == null || m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IMainPlatformActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IMainPlatformActions instance)
        {
            if (m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainPlatformActions instance)
        {
            foreach (var item in m_Wrapper.m_MainPlatformActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainPlatformActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainPlatformActions @MainPlatform => new MainPlatformActions(this);

    // FlappyGame
    private readonly InputActionMap m_FlappyGame;
    private List<IFlappyGameActions> m_FlappyGameActionsCallbackInterfaces = new List<IFlappyGameActions>();
    private readonly InputAction m_FlappyGame_Flap;
    public struct FlappyGameActions
    {
        private @PlayerInputSystem m_Wrapper;
        public FlappyGameActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flap => m_Wrapper.m_FlappyGame_Flap;
        public InputActionMap Get() { return m_Wrapper.m_FlappyGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyGameActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyGameActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Add(instance);
            @Flap.started += instance.OnFlap;
            @Flap.performed += instance.OnFlap;
            @Flap.canceled += instance.OnFlap;
        }

        private void UnregisterCallbacks(IFlappyGameActions instance)
        {
            @Flap.started -= instance.OnFlap;
            @Flap.performed -= instance.OnFlap;
            @Flap.canceled -= instance.OnFlap;
        }

        public void RemoveCallbacks(IFlappyGameActions instance)
        {
            if (m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyGameActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyGameActions @FlappyGame => new FlappyGameActions(this);
    public interface IMainPlatformActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IFlappyGameActions
    {
        void OnFlap(InputAction.CallbackContext context);
    }
}
