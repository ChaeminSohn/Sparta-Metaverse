//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/08.Inputs/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlatFormPlayer"",
            ""id"": ""9ba0aafc-6f18-4d5b-922e-086b032d8f8b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""95a42d10-0c4b-4a0e-afa5-a92ed4534d6a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""864d783c-c56e-4ea4-81f1-737ba97316a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""63c39c66-1f42-4cc0-b028-4c936a052be2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector ArrowKey"",
                    ""id"": ""bc1d359e-54e9-45d3-a19b-9baab7e208a5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""80880251-9c75-4d2d-86ab-7c5c2395965d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9f32327-7090-4149-b12c-2c8eda72f782"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e473741-ff8e-47e6-b8bd-4860c5101651"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""319a36a4-686c-43ab-89fe-a2d51c9b42b5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector WASD"",
                    ""id"": ""730898f6-150e-488e-9923-6a0513637966"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc18b810-280c-49c0-b680-00739a8bdea1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a7eab610-e94a-4459-b71a-2b6be8da5708"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e836a56f-0794-4cb7-8df3-a422d11b544f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""946fe167-ddfd-40fd-b9f1-08ea0c6818b0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""61c8b81b-81cf-4f5d-ad04-db95fbe0d988"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85e2ea34-a311-4e47-966b-5e97fa041e31"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FlappyPlayer"",
            ""id"": ""428c4bcd-cf4c-441b-bf7e-bb452d96a88f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""5b71339f-79e1-41bb-a21e-36251b7d2fcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""899e4f88-b52a-495a-9ae1-86c49cd6e3d5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlatFormPlayer
        m_PlatFormPlayer = asset.FindActionMap("PlatFormPlayer", throwIfNotFound: true);
        m_PlatFormPlayer_Move = m_PlatFormPlayer.FindAction("Move", throwIfNotFound: true);
        m_PlatFormPlayer_Look = m_PlatFormPlayer.FindAction("Look", throwIfNotFound: true);
        m_PlatFormPlayer_Jump = m_PlatFormPlayer.FindAction("Jump", throwIfNotFound: true);
        // FlappyPlayer
        m_FlappyPlayer = asset.FindActionMap("FlappyPlayer", throwIfNotFound: true);
        m_FlappyPlayer_Newaction = m_FlappyPlayer.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlatFormPlayer
    private readonly InputActionMap m_PlatFormPlayer;
    private List<IPlatFormPlayerActions> m_PlatFormPlayerActionsCallbackInterfaces = new List<IPlatFormPlayerActions>();
    private readonly InputAction m_PlatFormPlayer_Move;
    private readonly InputAction m_PlatFormPlayer_Look;
    private readonly InputAction m_PlatFormPlayer_Jump;
    public struct PlatFormPlayerActions
    {
        private @PlayerActions m_Wrapper;
        public PlatFormPlayerActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlatFormPlayer_Move;
        public InputAction @Look => m_Wrapper.m_PlatFormPlayer_Look;
        public InputAction @Jump => m_Wrapper.m_PlatFormPlayer_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlatFormPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatFormPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlatFormPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlatFormPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlatFormPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlatFormPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlatFormPlayerActions instance)
        {
            if (m_Wrapper.m_PlatFormPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlatFormPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlatFormPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlatFormPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlatFormPlayerActions @PlatFormPlayer => new PlatFormPlayerActions(this);

    // FlappyPlayer
    private readonly InputActionMap m_FlappyPlayer;
    private List<IFlappyPlayerActions> m_FlappyPlayerActionsCallbackInterfaces = new List<IFlappyPlayerActions>();
    private readonly InputAction m_FlappyPlayer_Newaction;
    public struct FlappyPlayerActions
    {
        private @PlayerActions m_Wrapper;
        public FlappyPlayerActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FlappyPlayer_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FlappyPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IFlappyPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_FlappyPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlappyPlayerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IFlappyPlayerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IFlappyPlayerActions instance)
        {
            if (m_Wrapper.m_FlappyPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlappyPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_FlappyPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlappyPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlappyPlayerActions @FlappyPlayer => new FlappyPlayerActions(this);
    public interface IPlatFormPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IFlappyPlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
